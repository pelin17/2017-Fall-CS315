
%{
int line_count = 0;
%}

SPACE [ \t]
NEWLINE [\n]
SINGLELINECOMMENT \/[/]+.*

DIGIT [0-9]

LOWERCASE [a-z]
UPPERCASE [A-Z]

LEFTPARANTHESIS \(
RIGHTPARANTHESIS \)
LEFTCURLY \{
RIGHTCURLY \}
LEFTSQUARE \[
RIGHTSQUARE \]

DOT \.
SEMICOLON \;
COLON \:
COMMA \,

ASSIGN =
EQUALS ==
NOTEQUAL !=

AND \&
OR \|
IMPLIES \->
IFANDONLYIF <\->
NEGATION !
CONNECTIVE [{AND}{OR}{IMPLIES}{IFANDONLYIF}]

CONCATENATION \+
IF if
ELSE else
TRUE true
FALSE false
TRUTH_VALUE {TRUE}|{FALSE}
WHILE while
STRING \"([^\\\"]|\\\"|\\\n|\\\\)*\"
ALPHANUMERIC {LOWERCASE}|{UPPERCASE}|{DIGIT}
CONSTANT_IDENTIFIER \"[^{SPACE}{NEWLINE}]*\"
CLASS_IDENTIFIER {UPPERCASE}{ALPHANUMERIC}*
PREDICATE predicate
ARRAY array
MAIN main
CONSTANT const
TRUTHVALUE truthvalue
VARIABLE var
INPUT input{COLON}
OUTPUT output{COLON}
CLASS class
RETURN return
IDENTIFIER {LOWERCASE}{ALPHANUMERIC}*
%%
{CONCATENATION} return CONCATENATION;
{LEFTSQUARE} return LEFTSQUARE;
{RIGHTSQUARE} return RIGHTSQUARE;
{MAIN} return MAIN;
{ARRAY} return ARRAY;
{PREDICATE} return PREDICATE;
{SEMICOLON}  return SEMICOLON;
{COMMA}  return COMMA;
{NEWLINE} {line_count++;}
{CONSTANT_IDENTIFIER}  return CONSTANT_IDENTIFIER;
{WHILE}  return WHILE;
{IF}  return IF;
{ELSE}  return ELSE;
{EQUALS}  return EQUALS;
{NOTEQUAL}  return NOTEQUAL;
{CLASS}  return CLASS;
{RETURN}  return RETURN;
{LEFTPARANTHESIS}  return LEFTPARANTHESIS;
{RIGHTPARANTHESIS}  return RIGHTPARANTHESIS;
{LEFTCURLY} return LEFTCURLY;
{RIGHTCURLY} return RIGHTCURLY;
{INPUT} return INPUT;
{OUTPUT} return OUTPUT;
{VARIABLE} return VARIABLE;
{CONSTANT} return CONSTANT;
{SINGLELINECOMMENT} return SINGLELINECOMMENT;
{CLASS_IDENTIFIER} return CLASS_IDENTIFIER;
{SPACE} ;
{ASSIGN} return ASSIGN;
{AND} return AND;
{OR} return OR;
{IMPLIES} return IMPLIES;
{NEGATION} return NEGATION;
{IFANDONLYIF} return IFANDONLYIF;
{TRUE} return TRUE;
{FALSE} return FALSE;
{TRUTHVALUE} return TRUTHVALUE;
{IDENTIFIER} return IDENTIFIER;
%%
int yywrap(){
   return 1;
}
