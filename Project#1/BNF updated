<program> -> class <class_identifier> {<block>}
<class_identifier> -> <upper_case_letter> <string_chars>
<upper_case_letter> -> [A-Z]
<string_chars> -> <char> | <char> <string_chars>
<char> 	-> <letter> | <digit>
<letter> 	-> <upper_case_letter> | <lower_case_letter>
<lower_case_letter> -> [a-z]
<digit> 	-> [0-9]
<block> 	-> [<constant_assignment> | <function_assignment> | <statements> ] {<block>}
<constant_assignment> -> <assign_const> | <assign_const>							<assign_const>
<function_assignment> -> <assign_function> | <assign_funtion>						<function_assignment>
<statements> 	-> <statement> | <statement> <statements>
<statement> 	-> <var_assignment> | <reassign_var> | <conditional_statement> | <function_calls> | <loop_statement> | <input_statement> | <output_statement> |
<comment_statement> -> <empty>
<comment_statement> -> <single_line_comment> |								<multiline_comment>
<single_line_comment> -> //<string_chars>
<multiline_comment> -> /*<string_chars>*/
<assign_const> -> const <constant_identifier> <assignment_op>							<compound_proposition>
<constant_identifier> -> “<string_chars>”
<assignment_operator> -> =
<compound_proposition> -> <compound_proposition> <connective>						<compound_proposition> | <negation>						<compound_proposition> | <proposition>						| <truth_value> |										(<compound_proposition>)
<connective> 	-> <and_connective> | <or_connective> |						<implies_connective> | <ifandonlyif_connective>
<negation> 	-> !
<proposition> 	-> <constant_identifier> <variable_idenfier>
<truth_value>	-> true_false
<assign_function> -> func <return_type> < function_identifier>					(<parameter>){<statement>								<return_statement>}
<return_type> 	-> void | <truth_value>
<function_identifier> -> <string_chars>
<parameters>	-> <parameter> | <parameter>, <parameters> |					<empty>
<parameter> 	-> <compound_proposition> | <var_identifier>
<var_assignment> -> <assign_var> | <assign_var> |								<var_assignment>
<assign_var> 	-> var <var_identifier> <assignment_op> <compound_proposition> <var_identifier> <string chars>
<re_assign_var> -> <var_identifier> <assignment_op> <compound_proposition>
<conditional_statement> -> <if_statement>
<if_statement> -> if (<logic_expr>) <stmts> | if (<logic_expr>)				<stmts> else <stmts>
<logic_expr> 	-> <compound_proposition> <composition>						<compound_proposition> |	<compound_proposition >
<comparison> 	-> == | !=
<function_call> -> <function_identifier> (<parameters>)
<loop_statement> -> <while_loop>
<while_loop> 	-> while (<logic_expr>) {statements}
<empty> ->
<return_statement> -> return <compound_proposition> | return					<empty>
<input_statement> -> input:	
<output_statement> -> output: <output_strings>
<output_strings> -> <string_chars> + <output_strings> |						<string_chars> <compound_proposition> +						<output_strings> <compound_proposition>

